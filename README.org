[[./img/HOTSOUP.png]]

* Custom tooling for 3D visuals
  HOTSOUP is my attempt at a personal take on the kind of custom tooling that demoscene
  creators build up to create their works. I make no claim to any of the techniques I employ
  in developing this tooling necessarily being "best practices", nor any promise of backwards
  compatibility from commit to commit - this is simply a virtual sketchbook for me to make
  stuff I think is cool, and learn as I go along. I also am not taking into account the kind of
  limitations that many demoscene creators impose on themselves at this point - all I care
  about is that the output of this program is reasonably performant on the hardware I want to
  target, which for right now is anything that can run OpenGL 3.3 (should cover even integrated
  GPUs).

** What it's built on
*** Right now
	- C++14
	- OpenGL 3.3
	- [[https://github.com/glfw/glfw][glfw]] (simple OpenGL context management)
	- [[https://github.com/skaslev/gl3w][gl3w]] (OpenGL core profile loading)
	- [[https://github.com/nothings/stb][stb]] (image encoding/decoding)
*** As I flesh things out more
	- [[https://github.com/floooh/sokol][sokol]] (cross-platform wrapper for OpenGL with more modern programming style)
	- [[https://github.com/ocornut/imgui][imgui]] (nice GUI elements without having to code them myself)
	- [[https://github.com/assimp/assimp][assimp]] (most fully featured model loader) or [[https://github.com/tinyobjloader/tinyobjloader][tinyobjloader]] (if I can get away with it, and want to save on compile time)
** Current goals
*** Short term
	- [X] Scripted dependency retrieval for Debian 11 Bullseye
	- [ ] Convert existing OpenGL code into sokol_gfx code for simple cross-platform support
	- [ ] Load assets from Blender with ASSIMP or tinyobjloader
	- [ ] Chess scene from [[https://www.youtube.com/watch?v=7mWbnVPwX4U][Crystal Dream 2]] 
	- [ ] +Emacs integration+ just split graphics programming functionality into its own emacs layer, and link it here
*** Longer term
	 - [ ] +100% compatibility running GLSL shaders from [[https://www.shadertoy.com/][Shadertoy]], locally (including texture layers)+ just use [[https://github.com/patriciogonzalezvivo/glslViewer][glslViewer]] for this
	 - [ ] DSL/command line interface for interactive programming
** Targeted platforms
   Right now, desktop Linux is the targeted platform for development, with the technologies
   the whole thing is built on hopefully being cross platform enough for building and running
   graphical programs created with it on Windows and macOS for cases where a free operating
   system just isn't as viable as a locked down spyware platform that can run Photoshop and FL
   Studio.
   +One possibility I'd like to experiment with is converting OpenGL ES programs into webGL+
   +with [[https://emscripten.org/][emscripten]], possibly skirting around cross-platform friction completely by running+
   +in a web browser, but this is down the line.+ OpenGL code wrapped with sokol headers
   compiles to WebAssembly, so this won't be an issue as soon as this is integrated.
